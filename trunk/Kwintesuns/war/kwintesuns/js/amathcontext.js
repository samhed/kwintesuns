MathContext.prototype.getDigits=getDigits;MathContext.prototype.getForm=getForm;MathContext.prototype.getLostDigits=getLostDigits;MathContext.prototype.getRoundingMode=getRoundingMode;MathContext.prototype.toString=toString;MathContext.prototype.isValidRound=isValidRound;MathContext.prototype.PLAIN=0;MathContext.prototype.SCIENTIFIC=1;MathContext.prototype.ENGINEERING=2;MathContext.prototype.ROUND_CEILING=2;MathContext.prototype.ROUND_DOWN=1;MathContext.prototype.ROUND_FLOOR=3;MathContext.prototype.ROUND_HALF_DOWN=5;MathContext.prototype.ROUND_HALF_EVEN=6;MathContext.prototype.ROUND_HALF_UP=4;MathContext.prototype.ROUND_UNNECESSARY=7;MathContext.prototype.ROUND_UP=0;MathContext.prototype.DEFAULT_FORM=MathContext.prototype.SCIENTIFIC;MathContext.prototype.DEFAULT_DIGITS=9;MathContext.prototype.DEFAULT_LOSTDIGITS=false;MathContext.prototype.DEFAULT_ROUNDINGMODE=MathContext.prototype.ROUND_HALF_UP;MathContext.prototype.MIN_DIGITS=0;MathContext.prototype.MAX_DIGITS=999999999;MathContext.prototype.ROUNDS=new Array(MathContext.prototype.ROUND_HALF_UP,MathContext.prototype.ROUND_UNNECESSARY,MathContext.prototype.ROUND_CEILING,MathContext.prototype.ROUND_DOWN,MathContext.prototype.ROUND_FLOOR,MathContext.prototype.ROUND_HALF_DOWN,MathContext.prototype.ROUND_HALF_EVEN,MathContext.prototype.ROUND_UP);MathContext.prototype.ROUNDWORDS=new Array("ROUND_HALF_UP","ROUND_UNNECESSARY","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_UP");MathContext.prototype.DEFAULT=new MathContext(MathContext.prototype.DEFAULT_DIGITS,MathContext.prototype.DEFAULT_FORM,MathContext.prototype.DEFAULT_LOSTDIGITS,MathContext.prototype.DEFAULT_ROUNDINGMODE);function MathContext(){this.digits=0;this.form=0;this.lostDigits=false;this.roundingMode=0;var A=this.DEFAULT_FORM;var D=this.DEFAULT_LOSTDIGITS;var C=this.DEFAULT_ROUNDINGMODE;if(MathContext.arguments.length==4){A=MathContext.arguments[1];D=MathContext.arguments[2];C=MathContext.arguments[3]}else{if(MathContext.arguments.length==3){A=MathContext.arguments[1];D=MathContext.arguments[2]}else{if(MathContext.arguments.length==2){A=MathContext.arguments[1]}else{if(MathContext.arguments.length!=1){throw"MathContext(): "+MathContext.arguments.length+" arguments given; expected 1 to 4"}}}}var B=MathContext.arguments[0];if(B!=this.DEFAULT_DIGITS){if(B<this.MIN_DIGITS){throw"MathContext(): Digits too small: "+B}if(B>this.MAX_DIGITS){throw"MathContext(): Digits too large: "+B}}if(A==this.SCIENTIFIC){}else{if(A==this.ENGINEERING){}else{if(A==this.PLAIN){}else{throw"MathContext() Bad form value: "+A}}}if((!(this.isValidRound(C)))){throw"MathContext(): Bad roundingMode value: "+C}this.digits=B;this.form=A;this.lostDigits=D;this.roundingMode=C;return }function getDigits(){return this.digits}function getForm(){return this.form}function getLostDigits(){return this.lostDigits}function getRoundingMode(){return this.roundingMode}function toString(){var D=null;var C=0;var B=null;if(this.form==this.SCIENTIFIC){D="SCIENTIFIC"}else{if(this.form==this.ENGINEERING){D="ENGINEERING"}else{D="PLAIN"}}var A=this.ROUNDS.length;C=0;C:for(;A>0;A--,C++){if(this.roundingMode==this.ROUNDS[C]){B=this.ROUNDWORDS[C];break C}}return"digits="+this.digits+" form="+D+" lostDigits="+(this.lostDigits?"1":"0")+" roundingMode="+B}function isValidRound(B){var A=0;var C=this.ROUNDS.length;A=0;A:for(;C>0;C--,A++){if(B==this.ROUNDS[A]){return true}}return false};